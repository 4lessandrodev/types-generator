import {{pascalCase name}}Aggregate from '@modules/{{dashCase name}}/domain/aggregates/{{dashCase name}}.aggregate';
import {{pascalCase name}}Model from '@modules/{{dashCase name}}/infra/models/{{dashCase name}}.model';
import { IMapper, DomainId, Result } from 'types-ddd';

export const {{pascalCase name}}AggregateFactory = (model: {{pascalCase name}}Model): Result<{{pascalCase name}}Aggregate> => {
    // check value object results here before initialize aggregate
    return {{pascalCase name}}Aggregate.create({
        ID: DomainId.create(model.id),
        key: model.key
    });
}

export const {{pascalCase name}}ModelFactory = (aggregate: {{pascalCase name}}Aggregate): {{pascalCase name}}Model => {
    return {
        id: aggregate.id.value.toString(),
        key: aggregate.key
    }
}

export class {{pascalCase name}}Mapper implements IMapper<{{pascalCase name}}Aggregate, {{pascalCase name}}Model>{
    toDomain(model: {{pascalCase name}}Model){
      return {{pascalCase name}}AggregateFactory(model).getResult();
    }
    toPersistence(aggregate: {{pascalCase name}}Aggregate){
        return {{pascalCase name}}ModelFactory(aggregate);
    }
}

export default {{pascalCase name}}Mapper;
